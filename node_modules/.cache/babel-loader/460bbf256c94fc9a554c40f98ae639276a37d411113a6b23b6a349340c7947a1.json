{"ast":null,"code":"var _jsxFileName = \"/home/bradley/projects/TravelVibesPR/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport ExperienceDetails from '../components/experienceDetails';\nimport { AuthContext } from '../context/authContext';\nimport \"../styles/Home.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst matchVibes = (userVibes, experienceVibes) => {\n  return experienceVibes.some(experienceVibe => userVibes.includes(experienceVibe));\n};\nconst Home = () => {\n  _s();\n  const [reload, setReload] = useState(false);\n  const [experiences, setExperiences] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [experiencesPerPage] = useState(10); // Number of experiences per page\n  const {\n    user,\n    loading\n  } = useContext(AuthContext);\n  const fetchExperiences = async () => {\n    try {\n      let url = '/api/experiences';\n      let userVibes = [];\n\n      // Get user vibes from local storage\n      const storedUserVibes = localStorage.getItem('userVibes');\n      if (storedUserVibes) {\n        userVibes = JSON.parse(storedUserVibes);\n      }\n\n      // Prepare URL with user vibe IDs as query parameters\n      if (userVibes.length > 0) {\n        url += `?vibes=${userVibes.join(',')}`;\n      }\n      const headers = {};\n      const experiencesResponse = await fetch(url, {\n        headers\n      });\n      if (!experiencesResponse.ok) {\n        throw new Error('Failed to fetch experiences');\n      }\n      const data = await experiencesResponse.json();\n\n      // Filter experiences based on user vibes if user vibes are present\n      const filteredExperiences = userVibes.length > 0 ? data.filter(experience => matchVibes(userVibes, experience.vibes)) : data;\n      setExperiences(filteredExperiences);\n    } catch (error) {\n      console.error('Error fetching experiences:', error);\n      setExperiences([]);\n    }\n  };\n  const handleDelete = async () => {\n    setReload(prevState => !prevState);\n  };\n  useEffect(() => {\n    if (!loading) {\n      fetchExperiences();\n    }\n  }, [user, loading]);\n  useEffect(() => {\n    if (!loading) {\n      fetchExperiences();\n    }\n  }, [reload, loading]);\n\n  // Get current experiences for the current page\n  const indexOfLastExperience = currentPage * experiencesPerPage;\n  const indexOfFirstExperience = indexOfLastExperience - experiencesPerPage;\n  const currentExperiences = experiences.slice(indexOfFirstExperience, indexOfLastExperience);\n\n  // Change page\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"experience-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: Array.from({\n        length: Math.ceil(experiences.length / experiencesPerPage)\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => paginate(index + 1),\n        className: currentPage === index + 1 ? \"pagination__button active\" : \"pagination__button\",\n        children: index + 1\n      }, index + 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"experience-details-list\",\n      children: currentExperiences && currentExperiences.map(experience => /*#__PURE__*/_jsxDEV(ExperienceDetails, {\n        experience: experience,\n        vibes: experience.vibes,\n        onDelete: handleDelete,\n        className: \"experience-details\"\n      }, experience._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: Array.from({\n        length: Math.ceil(experiences.length / experiencesPerPage)\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => paginate(index + 1),\n        className: currentPage === index + 1 ? \"pagination__button active\" : \"pagination__button\",\n        children: index + 1\n      }, index + 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"Z9+YQR2KvnUsVX5IIkMZfiCbcwI=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useContext","ExperienceDetails","AuthContext","jsxDEV","_jsxDEV","matchVibes","userVibes","experienceVibes","some","experienceVibe","includes","Home","_s","reload","setReload","experiences","setExperiences","currentPage","setCurrentPage","experiencesPerPage","user","loading","fetchExperiences","url","storedUserVibes","localStorage","getItem","JSON","parse","length","join","headers","experiencesResponse","fetch","ok","Error","data","json","filteredExperiences","filter","experience","vibes","error","console","handleDelete","prevState","indexOfLastExperience","indexOfFirstExperience","currentExperiences","slice","paginate","pageNumber","children","fileName","_jsxFileName","lineNumber","columnNumber","className","Array","from","Math","ceil","_","index","onClick","map","onDelete","_id","_c","$RefreshReg$"],"sources":["/home/bradley/projects/TravelVibesPR/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport ExperienceDetails from '../components/experienceDetails';\nimport { AuthContext } from '../context/authContext';\nimport \"../styles/Home.css\";\n\nconst matchVibes = (userVibes, experienceVibes) => {\n    return experienceVibes.some(experienceVibe => userVibes.includes(experienceVibe));\n};\n\nconst Home = () => {\n    const [reload, setReload] = useState(false);\n    const [experiences, setExperiences] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [experiencesPerPage] = useState(10); // Number of experiences per page\n    const { user, loading } = useContext(AuthContext);\n\n    const fetchExperiences = async () => {\n        try {\n            let url = '/api/experiences';\n            let userVibes = [];\n\n            // Get user vibes from local storage\n            const storedUserVibes = localStorage.getItem('userVibes');\n            if (storedUserVibes) {\n                userVibes = JSON.parse(storedUserVibes);\n            }\n\n            // Prepare URL with user vibe IDs as query parameters\n            if (userVibes.length > 0) {\n                url += `?vibes=${userVibes.join(',')}`;\n            }\n\n            const headers = {};\n\n            const experiencesResponse = await fetch(url, { headers });\n\n            if (!experiencesResponse.ok) {\n                throw new Error('Failed to fetch experiences');\n            }\n\n            const data = await experiencesResponse.json();\n\n            // Filter experiences based on user vibes if user vibes are present\n            const filteredExperiences = userVibes.length > 0 ? data.filter(experience =>\n                matchVibes(userVibes, experience.vibes)\n            ) : data;\n\n            setExperiences(filteredExperiences);\n        } catch (error) {\n            console.error('Error fetching experiences:', error);\n            setExperiences([]);\n        }\n    };\n\n    const handleDelete = async () => {\n        setReload(prevState => !prevState);\n    };\n\n    useEffect(() => {\n        if (!loading) {\n            fetchExperiences();\n        }\n    }, [user, loading]);\n\n    useEffect(() => {\n        if (!loading) {\n            fetchExperiences();\n        }\n    }, [reload, loading]);\n\n    // Get current experiences for the current page\n    const indexOfLastExperience = currentPage * experiencesPerPage;\n    const indexOfFirstExperience = indexOfLastExperience - experiencesPerPage;\n    const currentExperiences = experiences.slice(indexOfFirstExperience, indexOfLastExperience);\n\n    // Change page\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className=\"experience-list\">\n            {/* Pagination buttons */}\n            <div className=\"pagination\">\n                {Array.from({ length: Math.ceil(experiences.length / experiencesPerPage) }, (_, index) => (\n                    <button\n                        key={index + 1}\n                        onClick={() => paginate(index + 1)}\n                        className={currentPage === index + 1 ? \"pagination__button active\" : \"pagination__button\"}\n                    >\n                        {index + 1}\n                    </button>\n                ))}\n            </div>\n            {/* List of experience details */}\n            <div className=\"experience-details-list\">\n                {currentExperiences && currentExperiences.map((experience) => (\n                    <ExperienceDetails\n                        experience={experience}\n                        vibes={experience.vibes}\n                        key={experience._id}\n                        onDelete={handleDelete}\n                        className=\"experience-details\"\n                    />\n                ))}\n            </div>\n            {/* Pagination buttons (repeated for bottom navigation) */}\n            <div className=\"pagination\">\n                {Array.from({ length: Math.ceil(experiences.length / experiencesPerPage) }, (_, index) => (\n                    <button\n                        key={index + 1}\n                        onClick={() => paginate(index + 1)}\n                        className={currentPage === index + 1 ? \"pagination__button active\" : \"pagination__button\"}\n                    >\n                        {index + 1}\n                    </button>\n                ))}\n            </div>\n        </div>\n    );\n};\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}