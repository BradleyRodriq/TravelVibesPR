{"ast":null,"code":"var _jsxFileName = \"/home/bradley/projects/TravelVibesPR/src/context/experienceContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Define the initial state and reducer for experiences\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  experiences: []\n};\nconst experienceReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_EXPERIENCES':\n      return {\n        ...state,\n        experiences: action.payload\n      };\n    case 'CREATE_EXPERIENCE':\n      return {\n        ...state,\n        experiences: [action.payload, ...state.experiences]\n      };\n    case 'DELETE_EXPERIENCE':\n      const {\n        _id\n      } = action.payload;\n      const updatedExperiences = state.experiences.filter(exp => exp._id !== _id);\n      // No need to fetch experiences here\n      return {\n        ...state,\n        experiences: updatedExperiences\n      };\n    default:\n      return state;\n  }\n};\n\n// Create the context\nexport const ExperienceContext = /*#__PURE__*/createContext();\n\n// Create a custom hook to use the context\nexport const useExperienceContext = () => {\n  _s();\n  return useContext(ExperienceContext);\n};\n\n// Create the context provider component\n_s(useExperienceContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ExperienceContextProvider = ({\n  children\n}) => {\n  _s2();\n  const [state, dispatch] = useReducer(experienceReducer, initialState);\n\n  // Fetch experiences from the API\n  const fetchExperiences = async () => {\n    try {\n      const response = await fetch('api/experiences');\n      if (!response.ok) {\n        throw new Error('Failed to fetch experiences');\n      }\n      const data = await response.json();\n      dispatch({\n        type: 'SET_EXPERIENCES',\n        payload: data\n      });\n    } catch (error) {\n      console.error('Error fetching experiences:', error);\n    }\n  };\n\n  // Fetch experiences on component mount\n  useEffect(() => {\n    fetchExperiences();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExperienceContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      fetchExperiences\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s2(ExperienceContextProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = ExperienceContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ExperienceContextProvider\");","map":{"version":3,"names":["createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","initialState","experiences","experienceReducer","state","action","type","payload","_id","updatedExperiences","filter","exp","ExperienceContext","useExperienceContext","_s","ExperienceContextProvider","children","_s2","dispatch","fetchExperiences","response","fetch","ok","Error","data","json","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bradley/projects/TravelVibesPR/src/context/experienceContext.js"],"sourcesContent":["import { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Define the initial state and reducer for experiences\nconst initialState = {\n  experiences: [],\n};\n\nconst experienceReducer = (state, action) => {\n    switch (action.type) {\n      case 'SET_EXPERIENCES':\n        return {\n          ...state,\n          experiences: action.payload,\n        };\n      case 'CREATE_EXPERIENCE':\n        return {\n          ...state,\n          experiences: [action.payload, ...state.experiences],\n        };\n      case 'DELETE_EXPERIENCE':\n        const { _id } = action.payload;\n        const updatedExperiences = state.experiences.filter(exp => exp._id !== _id);\n        // No need to fetch experiences here\n        return {\n          ...state,\n          experiences: updatedExperiences,\n        };\n      default:\n        return state;\n    }\n  };\n\n\n// Create the context\nexport const ExperienceContext = createContext();\n\n// Create a custom hook to use the context\nexport const useExperienceContext = () => {\n  return useContext(ExperienceContext);\n};\n\n// Create the context provider component\nexport const ExperienceContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(experienceReducer, initialState);\n\n  // Fetch experiences from the API\n  const fetchExperiences = async () => {\n    try {\n      const response = await fetch('api/experiences');\n      if (!response.ok) {\n        throw new Error('Failed to fetch experiences');\n      }\n      const data = await response.json();\n      dispatch({ type: 'SET_EXPERIENCES', payload: data });\n    } catch (error) {\n      console.error('Error fetching experiences:', error);\n    }\n  };\n\n  // Fetch experiences on component mount\n  useEffect(() => {\n    fetchExperiences();\n  }, []);\n\n  return (\n    <ExperienceContext.Provider value={{ state, dispatch, fetchExperiences }}>\n      {children}\n    </ExperienceContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAExE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACzC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,iBAAiB;MACpB,OAAO;QACL,GAAGF,KAAK;QACRF,WAAW,EAAEG,MAAM,CAACE;MACtB,CAAC;IACH,KAAK,mBAAmB;MACtB,OAAO;QACL,GAAGH,KAAK;QACRF,WAAW,EAAE,CAACG,MAAM,CAACE,OAAO,EAAE,GAAGH,KAAK,CAACF,WAAW;MACpD,CAAC;IACH,KAAK,mBAAmB;MACtB,MAAM;QAAEM;MAAI,CAAC,GAAGH,MAAM,CAACE,OAAO;MAC9B,MAAME,kBAAkB,GAAGL,KAAK,CAACF,WAAW,CAACQ,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACH,GAAG,KAAKA,GAAG,CAAC;MAC3E;MACA,OAAO;QACL,GAAGJ,KAAK;QACRF,WAAW,EAAEO;MACf,CAAC;IACH;MACE,OAAOL,KAAK;EAChB;AACF,CAAC;;AAGH;AACA,OAAO,MAAMQ,iBAAiB,gBAAGjB,aAAa,CAAC,CAAC;;AAEhD;AACA,OAAO,MAAMkB,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC,OAAOlB,UAAU,CAACgB,iBAAiB,CAAC;AACtC,CAAC;;AAED;AAAAE,EAAA,CAJaD,oBAAoB;AAKjC,OAAO,MAAME,yBAAyB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzD,MAAM,CAACb,KAAK,EAAEc,QAAQ,CAAC,GAAGrB,UAAU,CAACM,iBAAiB,EAAEF,YAAY,CAAC;;EAErE;EACA,MAAMkB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;MAC/C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCP,QAAQ,CAAC;QAAEZ,IAAI,EAAE,iBAAiB;QAAEC,OAAO,EAAEiB;MAAK,CAAC,CAAC;IACtD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;;EAED;EACA5B,SAAS,CAAC,MAAM;IACdqB,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEnB,OAAA,CAACY,iBAAiB,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEzB,KAAK;MAAEc,QAAQ;MAAEC;IAAiB,CAAE;IAAAH,QAAA,EACtEA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEjC,CAAC;AAAChB,GAAA,CA3BWF,yBAAyB;AAAAmB,EAAA,GAAzBnB,yBAAyB;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}