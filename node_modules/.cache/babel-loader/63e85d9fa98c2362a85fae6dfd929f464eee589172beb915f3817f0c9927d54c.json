{"ast":null,"code":"import{createContext,useContext,useReducer,useEffect}from'react';// Define the initial state and reducer for experiences\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={experiences:[]};const experienceReducer=(state,action)=>{switch(action.type){case'SET_EXPERIENCES':return{...state,experiences:action.payload};case'CREATE_EXPERIENCE':return{...state,experiences:[action.payload,...state.experiences]};case'DELETE_EXPERIENCE':const{_id}=action.payload;const updatedExperiences=state.experiences.filter(exp=>exp._id!==_id);// No need to fetch experiences here\nreturn{...state,experiences:updatedExperiences};default:return state;}};// Create the context\nexport const ExperienceContext=/*#__PURE__*/createContext();// Create a custom hook to use the context\nexport const useExperienceContext=()=>{return useContext(ExperienceContext);};// Create the context provider component\nexport const ExperienceContextProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(experienceReducer,initialState);// Fetch experiences from the API\nconst fetchExperiences=async()=>{try{const response=await fetch('api/experiences');if(!response.ok){throw new Error('Failed to fetch experiences');}const data=await response.json();dispatch({type:'SET_EXPERIENCES',payload:data});}catch(error){console.error('Error fetching experiences:',error);}};// Fetch experiences on component mount\nuseEffect(()=>{fetchExperiences();},[]);return/*#__PURE__*/_jsx(ExperienceContext.Provider,{value:{state,dispatch,fetchExperiences},children:children});};","map":{"version":3,"names":["createContext","useContext","useReducer","useEffect","jsx","_jsx","initialState","experiences","experienceReducer","state","action","type","payload","_id","updatedExperiences","filter","exp","ExperienceContext","useExperienceContext","ExperienceContextProvider","_ref","children","dispatch","fetchExperiences","response","fetch","ok","Error","data","json","error","console","Provider","value"],"sources":["/home/bradley/projects/TravelVibesPR/src/context/experienceContext.js"],"sourcesContent":["import { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Define the initial state and reducer for experiences\nconst initialState = {\n  experiences: [],\n};\n\nconst experienceReducer = (state, action) => {\n    switch (action.type) {\n      case 'SET_EXPERIENCES':\n        return {\n          ...state,\n          experiences: action.payload,\n        };\n      case 'CREATE_EXPERIENCE':\n        return {\n          ...state,\n          experiences: [action.payload, ...state.experiences],\n        };\n      case 'DELETE_EXPERIENCE':\n        const { _id } = action.payload;\n        const updatedExperiences = state.experiences.filter(exp => exp._id !== _id);\n        // No need to fetch experiences here\n        return {\n          ...state,\n          experiences: updatedExperiences,\n        };\n      default:\n        return state;\n    }\n  };\n\n\n// Create the context\nexport const ExperienceContext = createContext();\n\n// Create a custom hook to use the context\nexport const useExperienceContext = () => {\n  return useContext(ExperienceContext);\n};\n\n// Create the context provider component\nexport const ExperienceContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(experienceReducer, initialState);\n\n  // Fetch experiences from the API\n  const fetchExperiences = async () => {\n    try {\n      const response = await fetch('api/experiences');\n      if (!response.ok) {\n        throw new Error('Failed to fetch experiences');\n      }\n      const data = await response.json();\n      dispatch({ type: 'SET_EXPERIENCES', payload: data });\n    } catch (error) {\n      console.error('Error fetching experiences:', error);\n    }\n  };\n\n  // Fetch experiences on component mount\n  useEffect(() => {\n    fetchExperiences();\n  }, []);\n\n  return (\n    <ExperienceContext.Provider value={{ state, dispatch, fetchExperiences }}>\n      {children}\n    </ExperienceContext.Provider>\n  );\n};\n"],"mappings":"AAAA,OAASA,aAAa,CAAEC,UAAU,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAExE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,YAAY,CAAG,CACnBC,WAAW,CAAE,EACf,CAAC,CAED,KAAM,CAAAC,iBAAiB,CAAGA,CAACC,KAAK,CAAEC,MAAM,GAAK,CACzC,OAAQA,MAAM,CAACC,IAAI,EACjB,IAAK,iBAAiB,CACpB,MAAO,CACL,GAAGF,KAAK,CACRF,WAAW,CAAEG,MAAM,CAACE,OACtB,CAAC,CACH,IAAK,mBAAmB,CACtB,MAAO,CACL,GAAGH,KAAK,CACRF,WAAW,CAAE,CAACG,MAAM,CAACE,OAAO,CAAE,GAAGH,KAAK,CAACF,WAAW,CACpD,CAAC,CACH,IAAK,mBAAmB,CACtB,KAAM,CAAEM,GAAI,CAAC,CAAGH,MAAM,CAACE,OAAO,CAC9B,KAAM,CAAAE,kBAAkB,CAAGL,KAAK,CAACF,WAAW,CAACQ,MAAM,CAACC,GAAG,EAAIA,GAAG,CAACH,GAAG,GAAKA,GAAG,CAAC,CAC3E;AACA,MAAO,CACL,GAAGJ,KAAK,CACRF,WAAW,CAAEO,kBACf,CAAC,CACH,QACE,MAAO,CAAAL,KAAK,CAChB,CACF,CAAC,CAGH;AACA,MAAO,MAAM,CAAAQ,iBAAiB,cAAGjB,aAAa,CAAC,CAAC,CAEhD;AACA,MAAO,MAAM,CAAAkB,oBAAoB,CAAGA,CAAA,GAAM,CACxC,MAAO,CAAAjB,UAAU,CAACgB,iBAAiB,CAAC,CACtC,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,yBAAyB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACpD,KAAM,CAACX,KAAK,CAAEa,QAAQ,CAAC,CAAGpB,UAAU,CAACM,iBAAiB,CAAEF,YAAY,CAAC,CAErE;AACA,KAAM,CAAAiB,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iBAAiB,CAAC,CAC/C,GAAI,CAACD,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAChD,CACA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClCP,QAAQ,CAAC,CAAEX,IAAI,CAAE,iBAAiB,CAAEC,OAAO,CAAEgB,IAAK,CAAC,CAAC,CACtD,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACrD,CACF,CAAC,CAED;AACA3B,SAAS,CAAC,IAAM,CACdoB,gBAAgB,CAAC,CAAC,CACpB,CAAC,CAAE,EAAE,CAAC,CAEN,mBACElB,IAAA,CAACY,iBAAiB,CAACe,QAAQ,EAACC,KAAK,CAAE,CAAExB,KAAK,CAAEa,QAAQ,CAAEC,gBAAiB,CAAE,CAAAF,QAAA,CACtEA,QAAQ,CACiB,CAAC,CAEjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}