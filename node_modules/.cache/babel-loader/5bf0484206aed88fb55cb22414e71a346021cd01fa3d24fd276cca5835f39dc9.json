{"ast":null,"code":"import React,{useState,useEffect,useContext}from'react';import ExperienceDetails from'../components/experienceDetails';import{AuthContext}from'../context/authContext';import\"../styles/Home.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const matchVibes=(userVibes,experienceVibes)=>{return experienceVibes.some(experienceVibe=>userVibes.includes(experienceVibe));};const Home=()=>{const[reload,setReload]=useState(false);const[experiences,setExperiences]=useState([]);const[currentPage,setCurrentPage]=useState(1);const[experiencesPerPage]=useState(10);// Number of experiences per page\nconst{user,loading}=useContext(AuthContext);const fetchExperiences=async()=>{try{let url='/api/experiences';let userVibes=[];// Get user vibes from local storage\nconst storedUserVibes=localStorage.getItem('userVibes');if(storedUserVibes){userVibes=JSON.parse(storedUserVibes);}// Prepare URL with user vibe IDs as query parameters\nif(userVibes.length>0){url+=\"?vibes=\".concat(userVibes.join(','));}const headers={};const experiencesResponse=await fetch(url,{headers});if(!experiencesResponse.ok){throw new Error('Failed to fetch experiences');}const data=await experiencesResponse.json();// Filter experiences based on user vibes if user vibes are present\nconst filteredExperiences=userVibes.length>0?data.filter(experience=>matchVibes(userVibes,experience.vibes)):data;setExperiences(filteredExperiences);}catch(error){console.error('Error fetching experiences:',error);setExperiences([]);}};const handleDelete=async()=>{setReload(prevState=>!prevState);};useEffect(()=>{if(!loading){fetchExperiences();}},[user,loading]);useEffect(()=>{if(!loading){fetchExperiences();}},[reload,loading]);// Get current experiences for the current page\nconst indexOfLastExperience=currentPage*experiencesPerPage;const indexOfFirstExperience=indexOfLastExperience-experiencesPerPage;const currentExperiences=experiences.slice(indexOfFirstExperience,indexOfLastExperience);// Change page\nconst paginate=pageNumber=>setCurrentPage(pageNumber);if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"experience-list\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pagination\",children:Array.from({length:Math.ceil(experiences.length/experiencesPerPage)},(_,index)=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>paginate(index+1),className:currentPage===index+1?\"pagination__button active\":\"pagination__button\",children:index+1},index+1))}),/*#__PURE__*/_jsx(\"div\",{className:\"experience-details-list\",children:currentExperiences&&currentExperiences.map(experience=>/*#__PURE__*/_jsx(ExperienceDetails,{experience:experience,vibes:experience.vibes,onDelete:handleDelete,className:\"experience-details\"},experience._id))}),/*#__PURE__*/_jsx(\"div\",{className:\"pagination\",children:Array.from({length:Math.ceil(experiences.length/experiencesPerPage)},(_,index)=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>paginate(index+1),className:currentPage===index+1?\"pagination__button active\":\"pagination__button\",children:index+1},index+1))})]});};export default Home;","map":{"version":3,"names":["React","useState","useEffect","useContext","ExperienceDetails","AuthContext","jsx","_jsx","jsxs","_jsxs","matchVibes","userVibes","experienceVibes","some","experienceVibe","includes","Home","reload","setReload","experiences","setExperiences","currentPage","setCurrentPage","experiencesPerPage","user","loading","fetchExperiences","url","storedUserVibes","localStorage","getItem","JSON","parse","length","concat","join","headers","experiencesResponse","fetch","ok","Error","data","json","filteredExperiences","filter","experience","vibes","error","console","handleDelete","prevState","indexOfLastExperience","indexOfFirstExperience","currentExperiences","slice","paginate","pageNumber","children","className","Array","from","Math","ceil","_","index","onClick","map","onDelete","_id"],"sources":["/home/bradley/projects/TravelVibesPR/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport ExperienceDetails from '../components/experienceDetails';\nimport { AuthContext } from '../context/authContext';\nimport \"../styles/Home.css\";\n\nconst matchVibes = (userVibes, experienceVibes) => {\n    return experienceVibes.some(experienceVibe => userVibes.includes(experienceVibe));\n};\n\nconst Home = () => {\n    const [reload, setReload] = useState(false);\n    const [experiences, setExperiences] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [experiencesPerPage] = useState(10); // Number of experiences per page\n    const { user, loading } = useContext(AuthContext);\n\n    const fetchExperiences = async () => {\n        try {\n            let url = '/api/experiences';\n            let userVibes = [];\n\n            // Get user vibes from local storage\n            const storedUserVibes = localStorage.getItem('userVibes');\n            if (storedUserVibes) {\n                userVibes = JSON.parse(storedUserVibes);\n            }\n\n            // Prepare URL with user vibe IDs as query parameters\n            if (userVibes.length > 0) {\n                url += `?vibes=${userVibes.join(',')}`;\n            }\n\n            const headers = {};\n\n            const experiencesResponse = await fetch(url, { headers });\n\n            if (!experiencesResponse.ok) {\n                throw new Error('Failed to fetch experiences');\n            }\n\n            const data = await experiencesResponse.json();\n\n            // Filter experiences based on user vibes if user vibes are present\n            const filteredExperiences = userVibes.length > 0 ? data.filter(experience =>\n                matchVibes(userVibes, experience.vibes)\n            ) : data;\n\n            setExperiences(filteredExperiences);\n        } catch (error) {\n            console.error('Error fetching experiences:', error);\n            setExperiences([]);\n        }\n    };\n\n    const handleDelete = async () => {\n        setReload(prevState => !prevState);\n    };\n\n    useEffect(() => {\n        if (!loading) {\n            fetchExperiences();\n        }\n    }, [user, loading]);\n\n    useEffect(() => {\n        if (!loading) {\n            fetchExperiences();\n        }\n    }, [reload, loading]);\n\n    // Get current experiences for the current page\n    const indexOfLastExperience = currentPage * experiencesPerPage;\n    const indexOfFirstExperience = indexOfLastExperience - experiencesPerPage;\n    const currentExperiences = experiences.slice(indexOfFirstExperience, indexOfLastExperience);\n\n    // Change page\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className=\"experience-list\">\n            {/* Pagination buttons */}\n            <div className=\"pagination\">\n                {Array.from({ length: Math.ceil(experiences.length / experiencesPerPage) }, (_, index) => (\n                    <button\n                        key={index + 1}\n                        onClick={() => paginate(index + 1)}\n                        className={currentPage === index + 1 ? \"pagination__button active\" : \"pagination__button\"}\n                    >\n                        {index + 1}\n                    </button>\n                ))}\n            </div>\n            {/* List of experience details */}\n            <div className=\"experience-details-list\">\n                {currentExperiences && currentExperiences.map((experience) => (\n                    <ExperienceDetails\n                        experience={experience}\n                        vibes={experience.vibes}\n                        key={experience._id}\n                        onDelete={handleDelete}\n                        className=\"experience-details\"\n                    />\n                ))}\n            </div>\n            {/* Pagination buttons (repeated for bottom navigation) */}\n            <div className=\"pagination\">\n                {Array.from({ length: Math.ceil(experiences.length / experiencesPerPage) }, (_, index) => (\n                    <button\n                        key={index + 1}\n                        onClick={() => paginate(index + 1)}\n                        className={currentPage === index + 1 ? \"pagination__button active\" : \"pagination__button\"}\n                    >\n                        {index + 1}\n                    </button>\n                ))}\n            </div>\n        </div>\n    );\n};\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}