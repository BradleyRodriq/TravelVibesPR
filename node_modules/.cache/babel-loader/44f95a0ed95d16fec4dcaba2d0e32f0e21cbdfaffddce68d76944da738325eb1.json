{"ast":null,"code":"import React,{useState,useEffect,useContext}from'react';import{AuthContext}from'../context/authContext';import'../styles/ExperienceManager.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CreateExperience=()=>{const[name,setName]=useState('');const[location,setLocation]=useState('');const[pictureUrl,setPictureUrl]=useState('');const[availableVibes,setAvailableVibes]=useState([]);const[selectedVibes,setSelectedVibes]=useState([]);const{user}=useContext(AuthContext);// Access user from the AuthContext\n// Function to fetch available vibes\nconst fetchAvailableVibes=async()=>{try{const response=await fetch('/api/vibes');if(!response.ok){throw new Error('Failed to fetch available vibes');}const data=await response.json();setAvailableVibes(data);// Assuming the response contains an array of vibes\n}catch(error){console.error('Error fetching available vibes:',error);setAvailableVibes([]);// Set availableVibes to empty array on error\n}};// Fetch all available vibes when the component mounts\nuseEffect(()=>{fetchAvailableVibes();},[]);// Function to handle vibe selection\nconst handleVibeSelection=e=>{const vibeId=e.target.value;if(e.target.checked){setSelectedVibes([...selectedVibes,vibeId]);}else{setSelectedVibes(selectedVibes.filter(vibe=>vibe!==vibeId));}};// Function to handle form submission\nconst handleSubmit=async e=>{e.preventDefault();const token=user.token;try{const response=await fetch('/api/experiences',{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(token)},body:JSON.stringify({name,location,pictureUrl,vibes:selectedVibes})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.error||'Failed response from server.');}const newExperience=await response.json();console.log('New Experience:',newExperience);// Clear the form fields after successful submission\nsetName('');setLocation('');setPictureUrl('');setSelectedVibes([]);console.log('Experience created successfully!');}catch(error){console.error('Error creating experience:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"create-experience-container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Create Experience\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"name\",children:\"Name:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"name\",value:name,onChange:e=>setName(e.target.value),required:true,className:\"input-field\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"location\",children:\"Location:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"location\",value:location,onChange:e=>setLocation(e.target.value),required:true,className:\"input-field\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"pictureUrl\",children:\"Picture URL:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"pictureUrl\",value:pictureUrl,onChange:e=>setPictureUrl(e.target.value),required:true,className:\"input-field\"})]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Choose Vibes\"}),/*#__PURE__*/_jsx(\"div\",{className:\"vibes-container\",children:availableVibes.map(vibe=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",id:vibe._id,name:vibe._id,value:vibe._id,onChange:handleVibeSelection,checked:selectedVibes.includes(vibe._id)}),/*#__PURE__*/_jsx(\"label\",{htmlFor:vibe._id,children:vibe.name})]},vibe._id))}),/*#__PURE__*/_jsxs(\"div\",{className:\"submit-button-container\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"submit-button\",children:\"Create Experience\"}),\" \"]})]})]});};export default CreateExperience;","map":{"version":3,"names":["React","useState","useEffect","useContext","AuthContext","jsx","_jsx","jsxs","_jsxs","CreateExperience","name","setName","location","setLocation","pictureUrl","setPictureUrl","availableVibes","setAvailableVibes","selectedVibes","setSelectedVibes","user","fetchAvailableVibes","response","fetch","ok","Error","data","json","error","console","handleVibeSelection","e","vibeId","target","value","checked","filter","vibe","handleSubmit","preventDefault","token","method","headers","concat","body","JSON","stringify","vibes","errorData","newExperience","log","className","children","onSubmit","htmlFor","type","id","onChange","required","map","_id","includes"],"sources":["/home/bradley/projects/TravelVibesPR/src/pages/ExperienceManager.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { AuthContext } from '../context/authContext';\nimport '../styles/ExperienceManager.css';\n\nconst CreateExperience = () => {\n    const [name, setName] = useState('');\n    const [location, setLocation] = useState('');\n    const [pictureUrl, setPictureUrl] = useState('');\n    const [availableVibes, setAvailableVibes] = useState([]);\n    const [selectedVibes, setSelectedVibes] = useState([]);\n    const { user } = useContext(AuthContext); // Access user from the AuthContext\n\n    // Function to fetch available vibes\n    const fetchAvailableVibes = async () => {\n        try {\n            const response = await fetch('/api/vibes');\n            if (!response.ok) {\n                throw new Error('Failed to fetch available vibes');\n            }\n            const data = await response.json();\n            setAvailableVibes(data); // Assuming the response contains an array of vibes\n        } catch (error) {\n            console.error('Error fetching available vibes:', error);\n            setAvailableVibes([]); // Set availableVibes to empty array on error\n        }\n    };\n\n    // Fetch all available vibes when the component mounts\n    useEffect(() => {\n        fetchAvailableVibes();\n    }, []);\n\n    // Function to handle vibe selection\n    const handleVibeSelection = (e) => {\n        const vibeId = e.target.value;\n        if (e.target.checked) {\n            setSelectedVibes([...selectedVibes, vibeId]);\n        } else {\n            setSelectedVibes(selectedVibes.filter(vibe => vibe !== vibeId));\n        }\n    };\n\n    // Function to handle form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const token = user.token;\n\n        try {\n            const response = await fetch('/api/experiences', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                },\n                body: JSON.stringify({ name, location, pictureUrl, vibes: selectedVibes })\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error || 'Failed response from server.');\n            }\n\n            const newExperience = await response.json();\n            console.log('New Experience:', newExperience);\n\n            // Clear the form fields after successful submission\n            setName('');\n            setLocation('');\n            setPictureUrl('');\n            setSelectedVibes([]);\n\n            console.log('Experience created successfully!');\n        } catch (error) {\n            console.error('Error creating experience:', error);\n        }\n    };\n\n    return (\n        <div className=\"create-experience-container\">\n            <h3>Create Experience</h3>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor=\"name\">Name:</label>\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                        required\n                        className=\"input-field\"\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"location\">Location:</label>\n                    <input\n                        type=\"text\"\n                        id=\"location\"\n                        value={location}\n                        onChange={(e) => setLocation(e.target.value)}\n                        required\n                        className=\"input-field\"\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"pictureUrl\">Picture URL:</label>\n                    <input\n                        type=\"text\"\n                        id=\"pictureUrl\"\n                        value={pictureUrl}\n                        onChange={(e) => setPictureUrl(e.target.value)}\n                        required\n                        className=\"input-field\"\n                    />\n                </div>\n                <h3>Choose Vibes</h3>\n                <div className=\"vibes-container\">\n                    {availableVibes.map(vibe => (\n                        <div key={vibe._id}>\n                            <input\n                                type=\"checkbox\"\n                                id={vibe._id}\n                                name={vibe._id}\n                                value={vibe._id}\n                                onChange={handleVibeSelection}\n                                checked={selectedVibes.includes(vibe._id)}\n                            />\n                            <label htmlFor={vibe._id}>{vibe.name}</label>\n                        </div>\n                    ))}\n                </div>\n                <div className='submit-button-container'>\n                    <button type=\"submit\" className=\"submit-button\">Create Experience</button> {/* Apply submit button class */}\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default CreateExperience;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}